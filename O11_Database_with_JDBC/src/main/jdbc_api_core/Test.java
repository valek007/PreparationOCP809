package main.jdbc_api_core;

public class Test {
	
	/*
	Driver is an interface that all driver classes must implement
	those drivers are loaded automatically by the DriverManager class.
	
	The most noticeable method of the Driver interface is connect, wich attempts to make
	a datebase connection using the given URL when such a connection is requested.
	
	An object whose class implements the Connection interface represents a connection to a specific datebase.
	
	The Connection interface contains methods to manage database connections and create SQL statements.
	
	If the auto-commit mode of a Connection is disabled, its commit method must be called to persist changes.
	
	A Connection object can be obtained by calling the DriverManager::getConnection method.
	
	The Statement interface represents objects used for executing SQL statements and returning query results.
	
	A Statement instance can be created using the Connection::createStatement method.
	
	When the connection on wich a statement was created is closed, the statement itself is also closed.
	
	A ResultSet instance is a table of data indicating a database result set, wich is usually 
	generated by executing a statement on a connection.
	
	A default ResultSet object is not updatable and has a cursor that moves forward only.
	
	When the statement creating a ResultSet is closed, the result set itself is automatically closed.
	
	A JDBC driver for a DBMS must implement all the interfaces covered in this lesson, including Driver, Connection, Statement and ResultSet.
	
	Implementations of JDBC drivers are classified into four types:
	Type 1: Drivers implementing the JDBC API as a mapping to another data access API, e.g ODBC
	Type 2: Drivers written partly in the Java programming language and partly in native code
	Type 3: Drivers that use a pure Java client connecting to a middleware server, wich then
	communicates the client's requests to the data source.
	Type 4: Drivers taht are pure Java and implement the network protocol for a specific data source
	the client connects directly to the data source.
	 */
}
